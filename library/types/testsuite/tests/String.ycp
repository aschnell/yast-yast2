{

include "testsuite.ycp";
import "String";

DUMP("String::Quote");
TEST(``(String::Quote(nil)), [], nil);
TEST(``(String::Quote("")), [], nil);
TEST(``(String::Quote("a")), [], nil);
TEST(``(String::Quote("a'b")), [], nil);
TEST(``(String::Quote("a'b'c")), [], nil);

DUMP("String::UnQuote");
TEST(``(String::UnQuote(nil)), [], nil);
TEST(``(String::UnQuote("")), [], nil);
TEST(``(String::UnQuote("a")), [], nil);
TEST(``(String::UnQuote("a'\\''b")), [], nil);
TEST(``(String::UnQuote("a'\\''b'\\''c")), [], nil);

DUMP("String::FormatSize");
TEST(``(String::FormatSize(nil)), [], nil);
TEST(``(String::FormatSize(0)), [], nil);
TEST(``(String::FormatSize(1)), [], nil);
TEST(``(String::FormatSize(1025)), [], nil);
TEST(``(String::FormatSize(1049000)), [], nil);
TEST(``(String::FormatSize(1074000000)), [], nil);
TEST(``(String::FormatSize(1100000000000)), [], nil);
TEST(``(String::FormatSize(1126000000000000)), [], nil);

DUMP("String::CutBlanks");
TEST(``(String::CutBlanks(nil)), [], nil);
TEST(``(String::CutBlanks("")), [], nil);
TEST(``(String::CutBlanks(" ")), [], nil);

TEST(``(String::CutBlanks("abc")), [], nil);
TEST(``(String::CutBlanks(" abc")), [], nil);
TEST(``(String::CutBlanks("abc ")), [], nil);
TEST(``(String::CutBlanks(" abc ")), [], nil);
TEST(``(String::CutBlanks("  abc")), [], nil);
TEST(``(String::CutBlanks("abc  ")), [], nil);

TEST(``(String::CutBlanks("ab c")), [], nil);
TEST(``(String::CutBlanks(" ab c")), [], nil);
TEST(``(String::CutBlanks("ab c ")), [], nil);
TEST(``(String::CutBlanks(" ab c ")), [], nil);
TEST(``(String::CutBlanks("  ab c")), [], nil);
TEST(``(String::CutBlanks("ab c  ")), [], nil);
TEST(``(String::CutBlanks("  ab c  ")), [], nil);
TEST(``(String::CutBlanks("ab  c")), [], nil);

DUMP("String::CutZeros");
TEST(``(String::CutZeros(nil)), [], nil);
TEST(``(String::CutZeros("")), [], nil);
TEST(``(String::CutZeros("1")), [], nil);
TEST(``(String::CutZeros("01")), [], nil);
TEST(``(String::CutZeros("001")), [], nil);
TEST(``(String::CutZeros("0")), [], nil);
TEST(``(String::CutZeros("00")), [], nil);

DUMP("String::Pad");
TEST(``(mergestring(["\"", String::Pad("", 2),"\""],"")), [], nil);
TEST(``(mergestring(["\"", String::Pad("a", 2),"\""],"")), [], nil);
TEST(``(mergestring(["\"", String::Pad("ab", 2),"\""],"")), [], nil);
TEST(``(mergestring(["\"", String::Pad("abc", 2),"\""],"")), [], nil);
TEST(``(mergestring(["\"", String::Pad("a", -1),"\""],"")), [], nil);
TEST(``(mergestring(["\"", String::Pad("", 0),"\""],"")), [], nil);
TEST(``(mergestring(["\"", String::Pad("a", 0),"\""],"")), [], nil);

DUMP("String::ParseOptions");
TEST(``(String::ParseOptions("a=3	b=2", $[])), [], nil);
TEST(``(String::ParseOptions("a=3 b=2", $[])), [], nil);
TEST(``(String::ParseOptions("a=", $[])), [], nil);

DUMP("String::CutRegexMatch");
TEST(``(String::CutRegexMatch("abc","[0-9]+",true)), [], nil);
TEST(``(String::CutRegexMatch("abc12def345ghi678900","[0-9]+",true)), [], nil);
TEST(``(String::CutRegexMatch("abc12def345ghi678900","[0-9]+",false)), [], nil);
TEST(``(String::CutRegexMatch("abc12def345ghi678900",".*",false)), [], nil);
}
