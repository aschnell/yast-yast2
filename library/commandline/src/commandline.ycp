/**
 * File:	include/commandline.ycp
 * Summary:	Simple command line event and argument handling loop
 * Authors:	Stanislav Visnovsky <visnov@suse.cz>
 *
 * $Id$
 *
 * A simple wrapper for handling command line arguments and interactive
 * controlling of a module.
 *
 * Uses CommandLine module.
 */

{

textdomain "base";

import "CommandLine";
import "Progress";
import "Report";
import "RichText";


define boolean fake_false() ``{
    return false;
}

global define boolean RunFunction( boolean() funct ) ``{
    Report::ClearAll();
    boolean() my_funct = funct;
    boolean ret = my_funct();
    string report = Report::GetMessages(
	Report::NumWarnings()>0,Report::NumErrors()>0,Report::NumMessages()>0);
    if( size(report) > 0 )
	CommandLine::Print( RichText::Rich2Plain( report )  );
    return ret;
}

global define boolean RunMapFunction( boolean(map<string,string>) funct,
    map<string,string> arg )
``{
    Report::ClearAll();
    boolean(map<string,string>) my_funct = funct;
    boolean ret = my_funct(arg);
    string report = Report::GetMessages(
	Report::NumWarnings()>0,Report::NumErrors()>0,Report::NumMessages()>0);
    if( size(report) > 0 )
	CommandLine::Print( RichText::Rich2Plain( report )  );
    return ret;
}

/**
 * Function to parse the command line, start a GUI or handle interactive and
 * command line actions as supported by the @ref CommandLine module.
 *
 * @param commandline	a map used in the CommandLine module with information
 *                      about the handlers for GUI and commands.
 * @return boolean	true if the changes should be written, false
 *                      if there was an error or no changes to be written (for example "help").
 */
global define boolean CommandLineRun( map commandline ) ``{
    /* The main () */
    y2milestone("----------------------------------------");
    y2milestone("Command line interface started");

    /* Initialize the arguments */
    if(!CommandLine::Init(commandline, WFM::Args())) {
	return ! CommandLine::Aborted();
    }

    boolean ret = true;
    boolean verbose = false;

    /* Start GUI */
    if(CommandLine::StartGUI()) {
	if( !haskey (commandline, "guihandler") ) {
	    y2error( "Missing GUI handler for %1", commandline["id"]:"<unknown>" );
	    CommandLine::Error( _("There is no user interface available for this module.") );
	    return false;
	}
	boolean() exec = commandline[ "guihandler" ]: fake_false;
	ret = exec();
	y2debug("GUI handler ret=%1", ret);
	return ret;
    } else {
	// disable Reports, we handle them on our own
	Report::Import( $[
	    "messages"	:$[ "show":false ],
	    "warnings"	:$[ "show":false ],
	    "errors"	:$[ "show":false ]
	]);


	/* non-GUI handling */

	verbose = contains( WFM::Args(), "verbose" );

	if( verbose )
	    CommandLine::Print( _("Initializing") );

	/* Turn off progress bar if not GUI */
	Progress::off();


	/* Start initialization */
	if( commandline["initialize"]:nil != nil ) {
	    boolean ret = RunFunction( commandline["initialize"]:fake_false );
	    if( !ret ) {
		y2milestone( "Module initialization failed" );
		return false;
	    }
	}

	if( verbose )
	    CommandLine::Print( _("Ready") );

	ret = true;

	/* Init variables */
	string command = "";
	list flags = [];
	map<string,string> options = $[];
        string exit = "";
        list l = [];

	while(!CommandLine::Done()) {
	    map m = CommandLine::Command();
            command = m["command"]:"exit";
	    options = m["options"]:$[];

	    boolean(map<string,string>) exec = (boolean(map<string,string>))
		lookup (commandline["actions", command]:$[], "handler", nil);

	    // there is a handler, execute the action
	    if( exec != nil ) {
		boolean res = RunMapFunction( exec, options );

		// if it is not interactive, abort on errors
		if( !CommandLine::Interactive() && res == false )
		    CommandLine::Abort();
	    }
	    else
	    {
		if( !CommandLine::Done() ) {
		    y2error("Unknown command '%1' from CommandLine", command );
		    continue;
		}
	    }
	}

	ret = ! CommandLine::Aborted();
    }

    if( ret && commandline["finish"]:nil != nil ) {
	if( verbose )
	    CommandLine::Print( _("Finishing") );
	ret = RunFunction( commandline["finish"]:fake_false );
	if( !ret ) {
	    y2milestone( "Module finishing failed" );
	    return false;
	}
	// translators: The command line interface is finished
	if( verbose )
	    CommandLine::Print( _("Done") );
    } else if( verbose )
	    CommandLine::Print( _("Quitting (without changes)") );

    y2milestone("Commandline interface finished");
    y2milestone("----------------------------------------");

    return ret;
}

/* EOF */
}
