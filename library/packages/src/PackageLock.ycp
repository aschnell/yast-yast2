/**
 * File:	modules/PackageLock.ycp
 * Package:	yast2
 * Summary:	Packages manipulation (system)
 * Authors:	Martin Vidner <mvidner@suse.cz>
 *
 * $Id$
 *
 * This should be used everywhere before Pkg is first used. #160319
 */

{

module "PackageLock";
textdomain "base";

import "Popup";
import "Label";

boolean have_lock = nil;

/**
 * Tries to acquire the packager (zypp) lock.
 * Reports an error if another process has the lock already.
 * Will only report once even if called multiple times.
 * @return true if we can continue
 */
global boolean Check () {
    // we already have a lock
    if (have_lock != nil) return have_lock;

    // just to allow 'Retry', see more in bug #280383
    boolean try_again = true;

    // while not having a lock and user wants to try again
    while (try_again) {
	// Invoke a cheap call that accesses the zypp lock
	have_lock = Pkg::Connect () == true; // nil guard
	if (have_lock == true) break;

	if (have_lock != true) {
	    try_again = (Popup::AnyQuestion (
		// TRANSLATORS: a popup headline
		_("Accessing the Package Management Failed"),
		// TRANSLATORS: an error message with question
		_("Another process is accessing the package database.
Package management cannot be used now.

Would you like to continue without having access
to the package management or retry to access it?
"),
		Label::ContinueButton(),
		Label::RetryButton(),
		// 'Continue' instead of 'Retry'
		`focus_yes
	    ) == false);
	}

	if (try_again) y2milestone ("User decided to retry...");
    }

    y2milestone ("PackageLock::Check result: %1", have_lock);
    return have_lock;
}


}
