/**
 * File:	modules/PackageCallbacksInit.ycp
 * Package:	yast2
 * Summary:	Initialize packager callbacks
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 * This module is used to initialize package manager callbacks
 */

{

module "PackageCallbacksInit";
textdomain "base";

import "Mode";

/**
 * Register callbacks for media change
 */
global define void SetMediaCallbacks () {
    Pkg::CallbackMediaChange ("PackageCallbacks::MediaChange");
    Pkg::CallbackSourceChange ("PackageCallbacks::SourceChange");
}

global void SetScriptCallbacks()
{
    Pkg::CallbackScriptStart("PackageCallbacks::ScriptStart");
    Pkg::CallbackScriptProgress("PackageCallbacks::ScriptProgress");
    Pkg::CallbackScriptProblem("PackageCallbacks::ScriptProblem");
    Pkg::CallbackScriptFinish("PackageCallbacks::ScriptFinish");

    Pkg::CallbackMessage("PackageCallbacks::Message");
}

global void SetScanDBCallbacks ()
{
    Pkg::CallbackStartScanDb ("PackageCallbacks::StartScanDb");
    Pkg::CallbackProgressScanDb ("PackageCallbacks::ProgressScanDb");
    Pkg::CallbackErrorScanDb ("PackageCallbacks::ErrorScanDb");
    Pkg::CallbackDoneScanDb ("PackageCallbacks::DoneScanDb");
}

global void ResetScanDBCallbacks ()
{
    Pkg::CallbackStartScanDb ("");
    Pkg::CallbackProgressScanDb ("");
    Pkg::CallbackErrorScanDb ("");
    Pkg::CallbackDoneScanDb ("");
}


/**
 * Register package manager callbacks
 */
global define void InitPackageCallbacks() {
    Pkg::CallbackStartProvide ("PackageCallbacks::StartProvide");
    Pkg::CallbackProgressProvide ("PackageCallbacks::ProgressProvide");
    Pkg::CallbackDoneProvide ("PackageCallbacks::DoneProvide");
    Pkg::CallbackStartPackage ("PackageCallbacks::StartPackage");
    Pkg::CallbackProgressPackage ("PackageCallbacks::ProgressPackage");
    Pkg::CallbackDonePackage ("PackageCallbacks::DonePackage");

    Pkg::CallbackStartDeltaDownload ("PackageCallbacks::StartDeltaProvide");
    Pkg::CallbackProgressDeltaDownload ("PackageCallbacks::ProgressProvide");
    Pkg::CallbackProblemDeltaDownload ("PackageCallbacks::ProblemDeltaDownload");
    Pkg::CallbackFinishDeltaDownload ("PackageCallbacks::FinishPatchDeltaProvide");

    Pkg::CallbackStartDeltaApply ("PackageCallbacks::StartDeltaApply");
    Pkg::CallbackProgressDeltaApply ("PackageCallbacks::ProgressProvide");
    Pkg::CallbackProblemDeltaApply ("PackageCallbacks::ProblemDeltaApply");
    Pkg::CallbackFinishDeltaApply ("PackageCallbacks::FinishPatchDeltaProvide");

    Pkg::CallbackStartPatchDownload ("PackageCallbacks::StartPatchProvide");
    Pkg::CallbackProgressPatchDownload ("PackageCallbacks::ProgressProvide");
    Pkg::CallbackProblemPatchDownload ("PackageCallbacks::ProblemPatchDownload");
    Pkg::CallbackFinishPatchDownload ("PackageCallbacks::FinishPatchDeltaProvide");

    // source create callbacks
    Pkg::CallbackSourceCreateStart("PackageCallbacks::SourceCreateStart");
    Pkg::CallbackSourceCreateProgress("PackageCallbacks::SourceCreateProgress");
    Pkg::CallbackSourceCreateError("PackageCallbacks::SourceCreateError");
    Pkg::CallbackSourceCreateEnd("PackageCallbacks::SourceCreateEnd");
    Pkg::CallbackSourceCreateInit("PackageCallbacks::SourceCreateInit");
    Pkg::CallbackSourceCreateDestroy("PackageCallbacks::SourceCreateDestroy");

    // source probing callbacks
    Pkg::CallbackSourceProbeStart("PackageCallbacks::SourceProbeStart");
    Pkg::CallbackSourceProbeFailed("PackageCallbacks::SourceProbeFailed");
    Pkg::CallbackSourceProbeSucceeded("PackageCallbacks::SourceProbeSucceeded");
    Pkg::CallbackSourceProbeProgress("PackageCallbacks::SourceProbeProgress");
    Pkg::CallbackSourceProbeError("PackageCallbacks::SourceProbeError");
    Pkg::CallbackSourceProbeEnd("PackageCallbacks::SourceProbeEnd");

    // source report callbacks
    Pkg::CallbackSourceReportStart("PackageCallbacks::SourceReportStart");
    Pkg::CallbackSourceReportProgress("PackageCallbacks::SourceReportProgress");
    Pkg::CallbackSourceReportError("PackageCallbacks::SourceReportError");
    Pkg::CallbackSourceReportEnd("PackageCallbacks::SourceReportEnd");
    Pkg::CallbackSourceReportInit("PackageCallbacks::SourceReportInit");
    Pkg::CallbackSourceReportDestroy("PackageCallbacks::SourceReportDestroy");

    // authentication callback
    Pkg::CallbackAuthentication("PackageCallbacks::Authentication");

    // @see bugzilla #183821
    // Do not register these callbacks in case of AutoInstallation
    if (Mode::autoinst() != true) {
	// Signature-related callbacks
	Pkg::CallbackAcceptUnsignedFile		("SignatureCheckCallbacks::AcceptUnsignedFile");
	Pkg::CallbackAcceptUnknownGpgKey	("SignatureCheckCallbacks::AcceptUnknownGpgKey");
	Pkg::CallbackImportGpgKey		("SignatureCheckCallbacks::ImportGpgKey");
	Pkg::CallbackAcceptNonTrustedGpgKey	("SignatureCheckCallbacks::TrustGpgKey");
	Pkg::CallbackAcceptVerificationFailed	("SignatureCheckCallbacks::AcceptVerificationFailed");
	Pkg::CallbackTrustedKeyAdded		("SignatureCheckCallbacks::TrustedKeyAdded");
	Pkg::CallbackTrustedKeyRemoved		("SignatureCheckCallbacks::TrustedKeyRemoved");
	Pkg::CallbackAcceptFileWithoutChecksum	("SignatureCheckCallbacks::AcceptFileWithoutChecksum");
    }

    SetMediaCallbacks ();

    SetScriptCallbacks();

    SetScanDBCallbacks();
}

/* EOF */
}
