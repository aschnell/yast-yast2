/**
 * File:	modules/Product.ycp
 * Package:	yast2
 * Summary:	Product data
 * Authors:	Klaus Kaempf <kkaempf@suse.de>
 *		Lukas Ocilka <locilka@suse.cz>
 *
 * $Id$
 */

{
    module "Product";

    import "Mode";
    import "Stage";
    import "SuSERelease";

    /**
     * General product name and version
     */
    global string name		= "";			// "SuSE Linux 8.1"
    global string short_name	= "";			// "SuSE Linux"
    global string version	= "";			// "8.1"
    global string vendor	= "";			// "SuSE Linux AG"

    /**
     * Distribution: Personal, Professional, etc.
     */
    global string dist		= "";
    global string distproduct	= "";			// "SuSE-Linux-Professional-INT-i386"
    global string distversion	= "";			// "8.1-0"

    /**
     * base product
     */
    global string baseproduct	= "";			// "UnitedLinux"
    global string baseversion	= "";			// "1.0"

    /**
     * url of release notes (downloaded during internet test)
     */
    global string relnotesurl	= "";
    
    /**
     * list of all urls of release notes (downloaded during internet test)
     * bugzilla #160563
     */
    global list <string> relnotesurl_all = [];

    /**
     * map relnotes url to product name
     */
    global map <string, string> product_of_relnotes = $[];

    /**
     *  Run YOU during the Internet connection test.
     */
    global boolean run_you	= true;

    /**
     * list of flags from content file
     */
    global list flags		= [];

    /**
     * list of patterns from content file
     */
    global list<string> patterns	= [];

    /**
     * Short label for bootloader entry
     */
    global string shortlabel	= "";


    // -----------------------------------------------
    /**
     * Constructor
     */
    global define void Product () ``{

	if (Stage::initial () && ! Mode::live_installation ())
	{
	    // it should use the same mechanism as running system. But it would
	    // mean to initialize package manager from constructor, which is
	    // not reasonable
	    name		= (string) SCR::Read(.content.LABEL);
	    short_name		= (string) SCR::Read(.content.SHORTLABEL);
	    if (short_name == nil)
		short_name = name;
	    version		= (string) SCR::Read(.content.VERSION);
	    vendor		= (string) SCR::Read(.content.VENDOR);

	    distproduct		= (string) SCR::Read(.content.DISTPRODUCT);
	    distversion		= (string) SCR::Read(.content.DISTVERSION);

	    baseproduct		= (string) SCR::Read(.content.BASEPRODUCT);
	    if (baseproduct == "") baseproduct = name;
	    baseversion		= (string) SCR::Read(.content.BASEVERSION);

	    relnotesurl		= (string) SCR::Read(.content.RELNOTESURL);
	    shortlabel		= (string) SCR::Read(.content.SHORTLABEL);

	    any tmp1 = SCR::Read (.content.FLAGS);
	    if (tmp1 != nil)
		flags		= splitstring ((string) tmp1, " ");
	    tmp1 = SCR::Read (.content.PATTERNS);
	    if (tmp1 != nil)
		patterns	= splitstring ((string) tmp1, " ");

	    // bugzilla #252122, since openSUSE 10.3
	    // deprecated:
	    // 		content.PATTERNS: abc cba bac
	    // should re replaced with (and/or)
	    // 		content.REQUIRES: pattern:abc pattern:cba pattern:bac
	    //		content.RECOMMENDS: pattern:abc pattern:cba pattern:bac
	    if (patterns != []) {
		y2warning ("Product content file contains deprecated PATTERNS tag, use REQUIRES and/or RECOMMENDS instead");
		y2milestone("PATTERNS: %1", patterns );
	    }
	}
	else if (!Mode::config ())
	{
	    name = SuSERelease::ReleaseName();
	    short_name = name;
	    version = SuSERelease::ReleaseVersion();
	}

	if(distproduct == nil) distproduct = "";
	dist		= splitstring(distproduct, "-")[2]:"";

	run_you		= ! contains (flags, "no_you");

	// set the product name for UI
        import "Wizard";

	y2milestone ("Product name: '%1'", name);

	if (name != nil && name != "") {
	    Wizard::SetProductName (name);
	}
    }

/* EOF */
}
