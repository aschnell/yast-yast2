/**
 * File:	modules/NetworkStorage.ycp
 * Package:	Network configuration
 * Summary:	Networked disks
 * Authors:	Martin Vidner <mvidner@suse.cz>
 *
 * $Id: NetworkStorage.ycp 38154 2007-05-28 08:20:39Z mzugec $
 *
 * #176804 - Root on iSCSI installation fails
 */

{

module "NetworkStorage";

global string getDevice(string mount_point){
 map out = (map)SCR::Execute(.target.bash_output, sformat("grep ' %1 ' /proc/mounts|grep -v rootfs|tr -d '\n'", mount_point));
 list<string> rows =  splitstring(out["stdout"]:"", " ");
 y2internal("rows %1", rows);
 string device="";
 if (rows[2]:""=="nfs") device="nfs";
	else device=rows[0]:"";
 y2internal("device %1", device);
 return device;
}

/**
 * If the disk is on a networked device (NFS, ISCSI),
 * the main NIC needs STARTMODE nfsroot instead of auto.
 * @return root dev over network
 */
global boolean isDiskOnNetwork(string device){
 if (device=="nfs") return true;
 boolean network_based=false;
 // test for iSCSI
 foreach(map<string, any> disk, (list<map<string, any> >)SCR::Read(.probe.disk), {
  y2milestone("%1", disk["dev_name"]:"");
  y2internal("%1", device);
  if (disk["dev_name"]:""==device){
   foreach(string row, disk["dev_names"]:[], {
    if (issubstring(row, "iscsi")) network_based=true;
   });
  }
 });
 // test for nfs (bnc#384420)
 if (!network_based) {
  string space="[[:space:]]";
  if (SCR::Execute(.target.bash, sformat("grep '%1%2%3*nfs%4' /proc/mounts ", space, device, space, space))==0){
   y2milestone("device %1 is network based : %2", device, network_based);
   network_based=true;
  }
 }
 return network_based;
}


/* EOF */
}
