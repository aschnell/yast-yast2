//
{

include "testsuite.ycp";

// FIXME: factor out as Assert::Equal(...);
string AssertEqual(any expected, any actual, string fail_message) {
    if (expected == actual) {
        return "PASS";
    }
    else {
        if (fail_message == nil || fail_message == "") {
            fail_message = sformat ("assertion failure, expected '%1', got '%2'", expected, actual);
        }
        y2error ("%1", fail_message);
        return "FAIL";
    }
}

/* TODO
void Mock(map & dummy, path where, any what) {
...
}
Mock (EXECUTE, .target.bash_output, $["stdout": "O HAI!", ...]);
*/
map MockBash(string stdout) {
    return $[
	"target" : $[
	    "bash_output" : $[
		"exit" : 0,
		"stdout" : stdout,
		"stderr" : "",
	    ],
	],
    ];
}

map MockExit(integer exit) {
    return $[
	"target" : $[
	    "bash" : exit
	],
    ];
}

map MockDir =
    $[
	"target" : $[
            "stat" : $[
                "isdir": true,
            ]
	],
    ];

map MockFileMissing =
    $[
	"target" : $[
	    "stat" : $[]
	],
    ];

map Add(map a, map b) {
    map c = a;
    foreach(any k, any v, b, {
            if (is(v, map) && haskey(c, k) && is(c[k]:nil, map)) {
                v = Add ((map) v, c[k]:$[]);
            }
            c[k] = v;
        });
    return c;
}

map Adder(list<map> many) {
    map result = $[];
    foreach(map one, many, {
            result = Add (result, one);
        });
    return result;
}

map READ = $[
    "target" : $[
        "tmpdir" : "/tmp",
    ]
];
TESTSUITE_INIT([READ], nil);

import "NetworkStorage";

map WRITE = $[];
map EXECUTE = $[];

EXECUTE = MockBash ("/dev/sda2 / ext3 rw,relatime,errors=continue,user_xattr,acl,commit=15,barrier=1,data=ordered 0 0");
TEST(``(
        AssertEqual("/dev/sda2", NetworkStorage::getDevice("/"), "")
        ), [READ, WRITE, EXECUTE], nil);

EXECUTE = MockBash ("nfs.example.com:/home/ /home nfs4 rw,relatime,vers=4,rsize=1048576,wsize=1048576,namlen=255,hard,proto=tcp,port=0,timeo=600,retrans=2,sec=krb5i,clientaddr=10.0.2.2,minorversion=0,local_lock=none,addr=10.0.0.1 0 0");
TEST(``(
        AssertEqual("nfs", NetworkStorage::getDevice("/home"), "")
        ), [READ, WRITE, EXECUTE], nil);

 READ = MockFileMissing;

/*
FIXME polish it to really test it

// pvs | grep foo
// FIXME I have no idea how the actual output looks like
EXECUTE = Adder([
                  MockBash ("sda1 etc\nsda2 etc\n"),
                  MockExit (1),
                  ]);
TEST(``(
        AssertEqual(7, NetworkStorage::isDiskOnNetwork("/dev/mapper/foo-bar"), "")
        ), [READ, WRITE, EXECUTE], nil);

EXECUTE = Adder([
                  MockBash ("A B C D E[i] F[j]"),
                  MockExit (1),
                  ]);
TEST(``(
        AssertEqual(7, NetworkStorage::isDiskOnNetwork("/dev/md9"), "")
        ), [READ, WRITE, EXECUTE], nil);

TEST(``(
        AssertEqual(7, NetworkStorage::isDiskOnNetwork("server:/export"), "")
        ), [READ, WRITE, EXECUTE], nil);

TEST(``(
        AssertEqual(7, NetworkStorage::isDiskOnNetwork("server-v4:/"), "")
        ), [READ, WRITE, EXECUTE], nil);
*/

READ = MockDir;
list EXECUTE2 = [
    MockExit (1),  //grep session
    MockExit (0)   //grep target
];
TEST(``(
        AssertEqual(3, NetworkStorage::isDiskOnNetwork("/dev/fc0"), "")
        ), [READ, WRITE, EXECUTE2], nil);

}
