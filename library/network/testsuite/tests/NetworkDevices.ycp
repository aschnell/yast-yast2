{

include "testsuite.ycp";

map READ = $[
];

TESTSUITE_INIT([READ], nil);
import "NetworkDevices";

DUMP ("Combined:");
list <string> ifcfgs = [
    "eth0",
    "eth1",
    "eth-pcmcia-0",
    "eth-usb-1",
    "tr-pcmcia-1",
    "ippp2",
    "ppp2",
    "lo",
    "eth0#1",
    "eth1#20",
    "eth-pcmcia-0#3",
    "eth-usb-1#0",
    "tr-pcmcia-2#432",
    "ippp2#2",
    "ppp2#2",
    "lo#1",
    "eth1#blah",
    ];

foreach (string ifcfg, ifcfgs, {
    DUMP (sformat ("ifcfg-%1", ifcfg));
    string t = NetworkDevices::device_type (ifcfg);
    string i = NetworkDevices::device_num (ifcfg);
    string ai = NetworkDevices::alias_num (ifcfg);
    DUMP (sformat ("%1", [t, i, ai]));
    string reassembled = (ai == "")?
	NetworkDevices::device_name (t, i) :
	NetworkDevices::alias_name (t, i, ai);
    if (ifcfg != reassembled)
    {
	DUMP (sformat (" Reassembled: %1", reassembled));
    }
});

DUMP ("Obsolete:");
TEST(``(NetworkDevices::device_name("eth-pcmcia-","0")), [], nil);
TEST(``(NetworkDevices::device_name("tr-pcmcia-","1")), [], nil);

TEST(``(NetworkDevices::alias_name("eth-pcmcia-","0","1")), [], nil);
TEST(``(NetworkDevices::alias_name("tr-pcmcia-","1","1")), [], nil);
}
