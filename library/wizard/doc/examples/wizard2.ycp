/*
 * Advanced wizard dialog example
 *
 * Author: Stefan Hundhammer <sh@suse.de>
 *
 * $Id$
 */
{
    import "Wizard";			// For the wizard dialog itself
    import "Popup";	// For Popup::YesNo()

    integer current_stage = 0;	// Required globally for Wizard::SetStage()


    // Initialize local variables
    
    integer wizard_stage  = 1;
    integer min_stage	  = 1;
    integer max_stage	  = 8;


    // Initial dialog creation
    Wizard::CreateDialog();


    // Input loop - left only via "Abort" or window manager close buttons
    
    while( true )
    {
	boolean have_back_button = false;
	boolean have_next_button = false;

	if ( wizard_stage > min_stage )
	{
	    have_back_button = true;
	}
	if ( wizard_stage < max_stage )
	{
	    have_next_button = true;
	}

	
	// Dynamically set wizard contents according to current wizard stage
	
	string headline  = sformat( "Advanced Wizard Example - Stage %1", wizard_stage );
	string help_text = sformat( "<p>Help text for <b>stage %1</b></p>", wizard_stage );

	
	// The wizard contents will wander from the top left corner to the bottom right corner;
	// dynamic spacings are used for this.
	
	term contents  = `Top(
			      `Left(
				    `VBox(
					  `VSpacing( wizard_stage ),
					  `HBox(
						`HSpacing( 3 * wizard_stage ),
						`Label( `opt(`outputField ),
							sformat( "Wizard stage #%1 of #%2",
								 wizard_stage, max_stage ) )
						)
					  )
				    )
			      );

	
	// Exchange the wizard contents, headline and help text.
	
	Wizard::SetContents( headline, contents, help_text,
			     have_back_button, have_next_button );

	
	// Set the title graphics according to the current wizard stage.
	
	Wizard::SetStage( wizard_stage,
			  false );	// force update
			   

	// Wait for user input.
	
	any button_id = UI::UserInput();


	// Process user input.
	
	if ( button_id == `abort ||	// the real "abort" button
	     button_id == `cancel  )	// window manager close button
	{
	    if ( Popup::YesNo( "Really abort?" ) )
	    {
		return; // This is the only exit of the loop and thus the program
	    }
	}
	else if ( button_id == `next )
	{
	    wizard_stage = wizard_stage + 1;
	    // It's perfectly safe not to check for wizard_stage < max_stage
	    // here since the "Next" button will only be active if this is so.
	}
	else if ( button_id == `back )
	{
	    wizard_stage = wizard_stage - 1;
	    // It's perfectly safe not to check for wizard_stage > min_stage
	    // here since the "Back" button will only be active if this is so.
	}
    }
}
