/**
 * File:
 *   file_popups.ycp
 *
 * Module:
 *   Wizard
 *
 * Summary:
 *   File/Directory selection dialogs
 *
 * Authors:
 *   Dan Vesely (dan@suse.cz)
 *
 * $Id$
 *
 * File/Directory selection dialogs
 * example: PopupDir ("/mnt"), PopupFile ("/etc")
 *
 */

{

    textdomain "base";

    import "Label";

    /*
     * Updated to use the new qt widgets (only if available, of course)
     */

    global define boolean HaveFilePopups () ``{
	return (lookup (UI::GetDisplayInfo (), "TextMode", true) == false);
    }

    /**
     * Returns itemized list of subdirs
     * @param subdir directory to list
     * @return list of directories
     */
    global define getsubdirs (string subdir) ``{
	string subdir2 = subdir + ".*";
	list files = splitstring (lookup (SCR::Execute (.target.bash_output, "/bin/ls -aFLd $DIR", $["DIR" : subdir]), "stdout", ""), "\n");
	if (size (files) == 0)
	    return [];

	subdir2 = subdir + "*";
	files = splitstring (lookup (SCR::Execute (.target.bash_output, "/bin/ls -aFLd $DIR", $["DIR" : subdir2]), "stdout", ""), "\n");

	// show directories and links
	files = filter (`file, files, ``(size (file) > 0 && substring (file, size (file) - 1, 1) == "/") );
	files = maplist (`f, files, ``(substring (f, 0, size (f) - 1)));
	files = maplist (`f, files, ``(substring (f, findlastof (f, "/") + 1) + "/"));
	if ( subdir != "/" )
	    files = prepend (files, "../");

	return maplist (`file, files, ``(`item (`id (subdir + file), file)));
    }

    /**
     * Returns itemized list of file
     * @param subdir directory to list
     * @return list of files
     */
    global define getfiles (string subdir) ``{
	return getfileswithmask (subdir, ["*"]);
    }

    /**
      * Return itemizes list of file matching mask
      * @param subdir directory to list
      * @param masks
      * @return list of files
      */
    global define getfileswithmask (string subdir, list masks) ``{
	masks = maplist (`e, masks, ``(
	    subdir+e
	));
	string maskstring = "";
	foreach (`i, masks, ``{
	    maskstring = maskstring + i + " ";
	});

	list files = splitstring (lookup (SCR::Execute (.target.bash_output, "/bin/ls -Fd $MASK", $["MASK" : maskstring]),
					  "stdout", ""), "\n");

	files = filter (`file, files, ``(size (file) > 0 && !contains (["/", "=", "|"], substring (file, size (file) - 1, 1))));
	files = maplist (`file, files, ``(substring (file, size (file) -1, 1) == "@" ? substring(file, 0, size (file) -1) : file));
	y2milestone("fff %1", substring (subdir, size (subdir) - 1, 1));
	if ( substring (subdir, size (subdir) - 1, 1) != "/") {
	    subdir = subdir + "/";
	}
        files = maplist (`f, files, ``(substring (f, findlastof (f, "/") + 1)));
	return maplist (`file, files, ``(`item (`id (subdir + file), file)));
    }


    /**
     * Popup dialog to choose file
     * @param dir string with path to start browsing with
     * @return string with selected file, empty string on cancel
     */
    global define PopupFile (string dir) ``{
	return PopupFileWithMask (dir, ["*"]);
    }
    /**
      * Popup dialog to choose file matching mask
      * @param dir string with path to start browsing with
      * @param masks
      * @return string with selected file, empty string on cancel
      */
    global define PopupFileWithMask (string dir, list masks) ``{
	if (HaveFilePopups ())
	{
	    string r = UI::AskForExistingFile (dir, mergestring (masks, " "), "");
	    return r==nil? "": r;
	}

	string subdir = AdjustDirName( dir );
	list dirs = getsubdirs (subdir);

	list history = [];
	integer history_ptr = -1;

	if (size (dirs) == 0)
	{
	    y2error ("No permissions for directory: %1, using /", dir);
	    subdir = "/";
	    dirs = getsubdirs (subdir);
	}
	
	history = add (history, [subdir, dirs]);
	history_ptr = history_ptr + 1;


	term contents = `VBox(
	    `HSpacing(80),
	    `ReplacePoint (`id(`rephead),
			   `Heading (`id (`head), sformat (_("Selected directory: %1"), subdir))
		),
	    `VSpacing (),
	    `HBox (
		`PushButton (`id (`backward), `opt (`disabled, `key_F6), "&<-"),
		`PushButton (`id (`forward), `opt (`disabled, `key_F7), "-&>")
		),
	    `HBox (
		`ReplacePoint (`id (`repdir),
			       `SelectionBox (`id (`dir), `opt(`notify), _("&Directories"), dirs)
		    ),
		`VSpacing(15),
		`ReplacePoint (`id (`repfile),
			       `SelectionBox (`id (`file), _("&Files"), getfileswithmask (subdir, masks))
		    )
		),
	    `HBox (
		   `PushButton (`id(`ok_button), `opt (`key_F10), Label::OKButton() ),
		   `HStretch (),
		   `PushButton (`id(`cancel_button), `opt (`key_F9), Label::CancelButton())
		   )
	    );


	UI::OpenDialog (
			`opt (`decorated),
			contents
			);



	any ret = nil;

	repeat {
	    ret = UI::UserInput ();
	y2error ("User Input");

	    if (ret == `backward)
	    {
		history_ptr = history_ptr > 0 ? history_ptr - 1 : history_ptr;
		dirs   = select (select (history, history_ptr, [subdir, dirs]), 1, []);
		subdir = select (select (history, history_ptr, [subdir, dirs]), 0, []);

		UI::ReplaceWidget (`id(`rephead), `Heading (`id (`head), sformat (UI (_("Selected directory: %1")), subdir)));
		UI::ReplaceWidget (`id (`repdir), `SelectionBox (`id (`dir), `opt(`notify), UI (_("Directories")), dirs));
		UI::ReplaceWidget (`id (`repfile), `SelectionBox (`id (`file), `opt(`notify), UI (_("Files")), getfileswithmask (subdir, masks)));
	    }

	    if (ret == `forward)
	    {
		history_ptr = history_ptr + 1;
		dirs   = select (select (history, history_ptr, [subdir, dirs]), 1, []);
		subdir = select (select (history, history_ptr, [subdir, dirs]), 0, []);

		UI::ReplaceWidget (`id(`rephead), `Heading (`id (`head), sformat (_("Selected directory: %1"), subdir)));
		UI::ReplaceWidget (`id (`repdir), `SelectionBox (`id (`dir), `opt(`notify), _("Directories"), dirs));
		UI::ReplaceWidget (`id (`repfile), `SelectionBox (`id (`file), `opt(`notify), _("Files")), getfileswithmask (subdir, masks));
	    }

	    if (ret == `dir)
	    {
		string old_dir = subdir;
		subdir  = UI::QueryWidget(`id (`dir), `CurrentItem);
		dirs = getsubdirs (subdir);

		if (size (dirs) == 0)
		{
		    y2error ("No permissions for directory: %1", subdir);
		    subdir = old_dir;
		    dirs = getsubdirs (subdir);
		    continue;
		}

                if (size (subdir) > 2 && substring (subdir, size (subdir) - 3, 3) == "../")
                {
                    subdir = substring (subdir, 0, findlastof (substring (subdir, 0, size (subdir) - 4), "/") + 1);
                    if ("" == subdir || nil == subdir)
                        subdir = "/";
                    dirs = getsubdirs (subdir);
                }

                if (size (subdir) > 1 && substring (subdir, size (subdir) - 2, 2) == "./")
                {
                    continue;
                }

		if (history_ptr + 1 < size (history))
		{
		    integer counter = -1;
		    history = filter (`e, history, ``{
			counter = counter + 1;
			return counter < history_ptr + 1;
		    });
		}

		history = add (history, [subdir, dirs]);
		history_ptr = history_ptr + 1;

		UI::ReplaceWidget (`id(`rephead), `Heading (`id (`head), sformat (_("Selected directory: %1"), subdir)));
		UI::ReplaceWidget (`id (`repdir), `SelectionBox (`id (`dir), `opt(`notify), _("Directories"), dirs));
		UI::ReplaceWidget (`id (`repfile), `SelectionBox (`id (`file), `opt(`notify), _("Files"), getfileswithmask (subdir, masks)));
		UI::SetFocus(`id(`dir));
	    }

	    UI::ChangeWidget (`id (`backward), `Enabled, (history_ptr > 0));
	    UI::ChangeWidget (`id (`forward), `Enabled, history_ptr < size (history) - 1);

	} until (ret == `ok_button || ret == `cancel_button);


	string file = "";

	if (ret == `ok_button)
	{
	    file = UI::QueryWidget (`id (`file), `CurrentItem);
	}

	UI::CloseDialog ();

	return file;
    }

    /**
     * Locally used to provide the correct directory name
     */
    global define AdjustDirName( string dir ) ``{
	if (size (dir) > 0 && substring (dir, size (dir) - 1, 1) != "/")
	{
	    dir = dir + "/";
	}
	else if ( dir == "" )
	{
	    // get the current directory
	    map retmap =  SCR::Execute( .target.bash_output, "/bin/pwd", $[] );
	    
	    dir = lookup( retmap, "stdout", "" );
	    dir = substring (dir, 0, size (dir) - 1);	// get rid of newline
    	    dir = dir + "/";
	}	    
	return dir;
    }
    
    /**
     * Popup dialog to choose file
     * @param dir string with path to start browsing with
     * @return string with selected directory
     */
    global define PopupDir (string dir) ``{
	if (HaveFilePopups ())
	{
	    string r = UI::AskForExistingDirectory (dir, "");
	    return r==nil? "": r;
	}

	string subdir = AdjustDirName (dir);
	list dirs = getsubdirs (subdir);

	list history = [];
	integer history_ptr = -1;

	if (size (dirs) == 0)
	{
	    y2error ("No permissions for directory: %1, using /", dir);
	    subdir = "/";
	    dirs = getsubdirs (subdir);
	}

	term contents =
	    `VBox(
		  `HSpacing(80),
		  `ReplacePoint (`id(`rephead),
				 `Heading (`id (`head), sformat (_("Selected directory: %1"), subdir))
				 ),
		  `VSpacing (),
		  `HBox (
		      `PushButton (`id (`backward), `opt (`disabled, `key_F6), "&<-"),
		      `PushButton (`id (`forward), `opt (`disabled, `key_F7), "-&>")
		      ),
		  `HBox (
			 `HSpacing(1),
			 `ReplacePoint (`id (`repdir),
					`SelectionBox (`id (`dir), `opt(`notify), "", dirs)
			     ),
			 `HSpacing(1),
			 `VSpacing(15)
			 ),
		  `HBox (
		      `PushButton (`id(`ok_button), `opt (`key_F10), Label::OKButton() ),
			 `HStretch (),
		      `PushButton (`id(`cancel_button), `opt (`key_F9), Label::CancelButton() )
			 )
		  );

	UI::OpenDialog (
	    `opt (`decorated),
	    contents
	    );



	any ret = nil;
	string subdir = dir;
	history = add (history, [subdir, dirs]);
	history_ptr = history_ptr + 1;

	repeat {
	    ret = UI::UserInput ();

	    if (ret == `backward)
	    {
		history_ptr = history_ptr > 0 ? history_ptr - 1 : history_ptr;
		dirs   = select (select (history, history_ptr, [subdir, dirs]), 1, []);
		subdir = select (select (history, history_ptr, [subdir, dirs]), 0, []);

		UI::ReplaceWidget (`id(`rephead), `Heading (`id (`head), sformat (UI (_("Selected directory: %1")), subdir)));
		UI::ReplaceWidget (`id (`repdir), `SelectionBox (`id (`dir), `opt(`notify), "", dirs));
	    }

	    if (ret == `forward)
	    {
		history_ptr = history_ptr + 1;
		dirs   = select (select (history, history_ptr, [subdir, dirs]), 1, []);
		subdir = select (select (history, history_ptr, [subdir, dirs]), 0,[]);

		UI::ReplaceWidget (`id(`rephead), `Heading (`id (`head), sformat (UI (_("Selected directory: %1")), subdir)));
		UI::ReplaceWidget (`id (`repdir), `SelectionBox (`id (`dir), `opt(`notify), "", dirs));
	    }

	    if (ret == `dir)
	    {

		string old_dir = subdir;
		subdir  = UI::QueryWidget(`id (`dir), `CurrentItem);
		dirs = getsubdirs (subdir);

		if (size (dirs) == 0)
		{
		    y2error ("No permissions for directory: %1", subdir);
		    subdir = old_dir;
		    dirs = getsubdirs (subdir);
		    continue;
		}

		if (history_ptr + 1 < size (history))
		{
		    integer counter = -1;
		    history = filter (`e, history, ``{
			counter = counter + 1;
			return counter < history_ptr + 1;
		    });
		}

		history = add (history, [subdir, dirs]);
		history_ptr = history_ptr + 1;

		if (size (subdir) > 2 && substring (subdir, size (subdir) - 3, 3) == "../")
		{
		    subdir = substring (subdir, 0, findlastof (substring (subdir, 0, size (subdir) - 4), "/") + 1);
		    dirs = getsubdirs (subdir);
		}

		if (size (subdir) > 1 && substring (subdir, size (subdir) - 2, 2) == "./")
		{
		    continue;
		}

		UI::ReplaceWidget (`id(`rephead), `Heading (`id (`head), sformat (_("Selected directory: %1"), subdir)));
		UI::ReplaceWidget (`id (`repdir), `SelectionBox (`id (`dir), `opt(`notify), "", dirs));
		UI::SetFocus( `id(`dir) );

	    }
	    UI::ChangeWidget (`id (`backward), `Enabled, (history_ptr > 0));
	    UI::ChangeWidget (`id (`forward), `Enabled, history_ptr < size (history) - 1);

	} until (ret == `ok_button || ret == `cancel_button);

	UI::CloseDialog ();

	return ret == `ok_button ? subdir : "";
    }



    /**
     * Popup dialog to choose file or enter a new file name
     * @param dir string with path to start browsing with
     * @return string with selected file, empty string on cancel
     */
    global define SaveFileAs (string dir) ``{
	if (HaveFilePopups ())
	{
	    string r = UI::AskForSaveFileName (dir, "*", "");
	    return r==nil? "": r;
	}

	string subdir = AdjustDirName( dir );
	
	list dirs = getsubdirs (subdir);
	sleep(100);
	
	list history = [];
	integer history_ptr = -1;

	if (size (dirs) == 0)
	{
	    y2error ("No permissions for directory: %1, using /", dir);
	    subdir = "/";
	    dirs = getsubdirs (subdir);
	}

	history = add (history, [subdir, dirs]);
	history_ptr = history_ptr + 1;


	term contents = `VBox(
	    `HSpacing(80),
	    `ReplacePoint (`id(`rephead),
			   `Heading (`id (`head), sformat (_("Selected directory: %1"), subdir))
		),
	    `VSpacing (),
	    `HBox (
		`PushButton (`id (`backward), `opt (`disabled, `key_F6), "&<-"),
		`PushButton (`id (`forward), `opt (`disabled, `key_F7), "-&>")
		),
	    `HBox (
		`ReplacePoint (`id (`repdir),
			       `SelectionBox (`id (`dir), `opt(`notify), _("D&irectories"), dirs)
		    ),
		`VSpacing(15),
		`ReplacePoint (`id (`repfile),
			       `SelectionBox (`id (`file),  `opt(`notify), _("Fi&les"), getfiles (subdir))
		    )
		),
	    `TextEntry(`id(`filename), _("File na&me")),
	    `HBox (
		   `PushButton (`id(`ok_button), `opt (`key_F10), Label::OKButton() ),
		   `HStretch (),
		   `PushButton (`id(`cancel_button), `opt (`key_F9), Label::CancelButton())
		)
	    );


	UI::OpenDialog (
	    `opt (`decorated),
	    contents
	    );



	map ret_map = $[];

	repeat {
	    ret_map = UI::WaitForEvent ();
	    y2milestone("ret: %1", ret_map);

	    if (ret_map["ID"]:`none == `backward)
	    {
		history_ptr = history_ptr > 0 ? history_ptr - 1 : history_ptr;
		dirs   = select (select (history, history_ptr, [subdir, dirs]), 1, []);
		subdir = select (select (history, history_ptr, [subdir, dirs]), 0, []);

		UI::ReplaceWidget (`id(`rephead), `Heading (`id (`head), sformat (_("Selected directory: %1"), subdir)));
		UI::ReplaceWidget (`id (`repdir), `SelectionBox (`id (`dir), `opt(`notify), _("Dire&ctories"), dirs));
		UI::ReplaceWidget (`id (`repfile), `SelectionBox (`id (`file), `opt(`notify), _("Fi&les"), getfiles (subdir)));
	    }
	    else  if (ret_map["ID"]:`none == `forward)
	    {
		history_ptr = history_ptr + 1;
		dirs   = select (select (history, history_ptr, [subdir, dirs]), 1, []);
		subdir = select (select (history, history_ptr, [subdir, dirs]), 0, []);

		UI::ReplaceWidget (`id(`rephead), `Heading (`id (`head), sformat (_("Selected directory: %1"), subdir)));
		UI::ReplaceWidget (`id (`repdir), `SelectionBox (`id (`dir), `opt(`notify), _("Directories"), dirs));
		UI::ReplaceWidget (`id (`repfile), `SelectionBox (`id (`file), `opt(`notify), _("Files"), getfiles (subdir)));
	    }
	    else if (ret_map["ID"]:`none == `dir
		     && ret_map["EventReason"]:"" == "Activated" )
	    {
		string old_dir = subdir;
		subdir  = UI::QueryWidget(`id (`dir), `CurrentItem);		
		dirs = getsubdirs (subdir);		
		if (size (dirs) == 0)
		{
		    y2error ("No permissions for directory: %1", subdir);
		    subdir = old_dir;
		    dirs = getsubdirs (subdir);
		    continue;
		}

                if (size (subdir) > 2 && substring (subdir, size (subdir) - 3, 3) == "../")
                {
                    subdir = substring (subdir, 0, findlastof (substring (subdir, 0, size (subdir) - 4), "/") + 1);
                    dirs = getsubdirs (subdir);
                }

                if (size (subdir) > 1 && substring (subdir, size (subdir) - 2, 2) == "./")
                {
                    continue;
                }

		if (history_ptr + 1 < size (history))
		{
		    integer counter = -1;
		    history = filter (`e, history, ``{
			counter = counter + 1;
			return counter < history_ptr + 1;
		    });
		}

		history = add (history, [subdir, dirs]);
		history_ptr = history_ptr + 1;

		UI::ReplaceWidget (`id(`rephead), `Heading (`id (`head), sformat (_("Selected directory: %1"), subdir)));
		UI::ReplaceWidget (`id (`repdir), `SelectionBox (`id (`dir), `opt(`notify), _("Directories"), dirs));
		UI::ReplaceWidget (`id (`repfile), `SelectionBox (`id (`file), `opt(`notify), _("Files"), getfiles (subdir)));
		UI::SetFocus(`id(`dir));
	    }
	    else if (ret_map["ID"]:`none == `file
		     && ret_map["EventReason"]:"" == "Activated")
	    {
		any current_selected = UI::QueryWidget(`id(`file), `CurrentItem);
		if (current_selected!=nil)
		{
		    UI::ChangeWidget(`id(`filename), `Value, current_selected);
		}
	    }

	    UI::ChangeWidget (`id (`backward), `Enabled, (history_ptr > 0));
	    UI::ChangeWidget (`id (`forward), `Enabled, history_ptr < size (history) - 1);

	} until (ret_map["ID"]:`none == `ok_button || ret_map["ID"]:`none == `cancel_button);


	string file = "";

	if (ret_map["ID"]:`none == `ok_button)
	{
	    file = UI::QueryWidget (`id (`filename), `Value);

	    if ("" == file)
		file = UI::QueryWidget (`id (`file), `CurrentItem);

	    // add directory if file has not absolute path
	    if (size(file) > 0 && substring(file, 0, 1) != "/")
	    {
		file = subdir + file;
	    }
	}

	UI::CloseDialog ();
	y2milestone( "Save as: %1", file );
	
	return file;
    }
}
