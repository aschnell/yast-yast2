/**
 * File:	modules/Wizard.ycp
 * Package:	yast2
 * Summary:	Wizard dialog
 * Authors:	Stefan Hundhammer <sh@suse.de>
 *
 * Provides the wizard dialog (common screen for all YaST2 installation
 * modules) and functions to set the contents, to replace and restore
 * special widgets.
 */

{

    module "Wizard";
    textdomain "base";

    import "Label";
    import "Popup";
    import "Directory";

    // keep trailing "/" !!
    string theme_path = Directory::themedir + "/current/";
    string icon_path  = Directory::icondir; // theme_path;

    boolean have_fancy_ui = nil;

    /**
     * Initialization
     **/
    define void Init() {
	map ui_info = UI::GetDisplayInfo();

	have_fancy_ui = UI::HasSpecialWidget(`Wizard )
	    && ui_info[ "Depth" ]:0 >= 15
	    && ui_info[ "DefaultWidth" ]:0 >= 800
	    && ui_info[ "DefaultHeight"]:0 >= 600;

	// have_fancy_ui = false;

	UI::SetFunctionKeys( Label::DefaultFunctionKeyMap() );
    }


    /**
     * Returns a button box with buttons "Back", "Abort", "Next"
     * @return a widget tree
     **/
    global define term BackAbortNextButtonBox() {
	return `HBox(
		     `HWeight(1, `ReplacePoint(`id(`rep_back ), `PushButton(`id(`back ), `opt (`key_F8), Label::BackButton()  ) ) ),
		     `HStretch(),
		     `ReplacePoint(`id(`rep_abort), `PushButton(`id(`abort), `opt (`key_F9), Label::AbortButton() ) ),
		     `HStretch(),
		     `HWeight(1, `ReplacePoint(`id(`rep_next ), `PushButton(`id(`next), `opt (`key_F10, `default), Label::NextButton()  ) ) )
		     );
    }


    /**
     * Returns a button box with buttons "Back", "Abort Installation", "Next"
     * @return a widget tree
     **/
    global define term BackAbortInstallationNextButtonBox() {
	return `HBox(
		     `HWeight(1, `ReplacePoint(`id(`rep_back ), `PushButton(`id(`back ), `opt (`key_F8), Label::BackButton()  ) ) ),
		     `HStretch(),
		     `ReplacePoint(`id(`rep_abort), `PushButton(`id(`abort), `opt (`key_F9), Label::AbortInstallationButton() ) ),
		     `HStretch(),
		     `HWeight(1, `ReplacePoint(`id(`rep_next ), `PushButton(`id(`next), `opt (`key_F10, `default), Label::NextButton()  ) ) )
		     );
    }


    /**
     * Returns a button box with buttons "Back", "Next"
     * @return a widget tree
     **/
    global define term BackNextButtonBox() {
	return `HBox(
		     `HWeight(1, `ReplacePoint(`id(`rep_back ), `PushButton(`id(`back ), `opt (`key_F8), Label::BackButton()  ) ) ),
		     `HStretch(),
		     `HWeight(1, `ReplacePoint(`id(`rep_next ), `PushButton(`id(`next ), `opt (`key_F10, `default), Label::NextButton()  ) ) )
		     );
    }


    /**
     * Returns a button box with buttons "Cancel", "Accept"
     * @return a widget tree
     **/
    global define term CancelAcceptButtonBox() {
	return `HBox(
		     `HWeight(1, `Empty() ),	// Layout trick to make sure the center button is centered
		     `HStretch(),
		     `HWeight(1, `PushButton(`id(`cancel ), `opt (`key_F9), Label::CancelButton()  ) ),
		     `HStretch(),
		     `HWeight(1, `PushButton(`id(`accept ), `opt (`key_F10, `default), Label::AcceptButton()  ) )
		     );
    }


    /**
     * Returns a button box with buttons "Abort", "Accept"
     * @return a widget tree
     **/
    global define term AbortAcceptButtonBox() {
	return `HBox(
		     `HWeight(1, `Empty() ),	// Layout trick to make sure the center button is centered
		     `HStretch(),
		     `PushButton(`id(`abort ), `opt (`key_F9), Label::AbortButton() ),
		     `HStretch(),
		     `HWeight(1, `PushButton(`id(`accept ), `opt (`key_F10, `default), Label::AcceptButton()  ) )
		     );
    }


    /**
     * Returns a button box with buttons "Abort Installation", "Accept"
     * @return a widget tree
     **/
    global define term AbortInstallationAcceptButtonBox() {
	return `HBox(
		     `HWeight(1, `Empty() ),	// Layout trick to make sure the center button is centered
		     `HStretch(),
		     `PushButton(`id(`abort ), `opt (`key_F9), Label::AbortInstallationButton() ),
		     `HStretch(),
		     `HWeight(1, `PushButton(`id(`accept ), `opt (`key_F10, `default), Label::AcceptButton()  ) )
		     );
    }


    /**
     * Returns a button box with buttons "Abort", "Apply", "Finish"
     * @return a widget tree
     **/
    global define term AbortApplyFinishButtonBox()
    {
	return `HBox(
		     `PushButton(`id(`abort ), Label::AbortButton() ),
		     `HStretch(),
		     // button text
		     `PushButton(`id(`apply), _("&Apply") ),
		     `HStretch(),
		     `PushButton(`id(`finish), Label::FinishButton() )
		     );
    }


    /**
     * Returns a term describing a generic wizard dialog with a configurable
     * button box.
     *
     * @param	button_box term that contains a `HBox() with buttons in it
     * @return	term describing the dialog.
     **/
    global define term GenericDialog( term button_box ) {
	return `VBox( `id(`WizardDialog),
		      `HBox(
			    `HWeight( 30, `ReplacePoint( `id(`helpSpace), `RichText(`id(`HelpText), ""))),
			    `HSpacing(1),
			    `HWeight( 70, `VBox(
						`VSpacing(0.2),
						`HBox(
						      `Heading(`id(`title), `opt (`hstretch), _("YaST2\nInitializing ...")),
						      `HStretch()
						      ),
						`VWeight( 1, // Layout trick: Lower layout priority with weight
							 `HVCenter(
								   `ReplacePoint(`id(`contents), `Empty() )
								   )
							 ),
						`ReplacePoint(`id(`rep_button_box), button_box ),
						`VSpacing(0.2)
						)
				      ),
			    `HSpacing(1)
			    )
		      );
    }



    /**
     * Check if the topmost dialog is a wizard dialog
     * (i.e. has a widget with `id(`WizardDialog) )
     *
     * @return true, if topmost dialog is a wizard dialog, false otherwise
     **/
    global define boolean IsWizardDialog() {
	return UI::WidgetExists(`id(`WizardDialog) ) || UI::WidgetExists(`wizard);
    }


    //	/**
    //	 * Check if the topmost dialog has a "Next" button
    //	 * @return true if widget with `id(`next) is present, false otherwise
    //	 **/
    //	global define boolean HasNextButton() {
    //		return UI::WidgetExists(`id(`next) );
    //	}



    /**
     * Open a popup dialog that displays a help text (rich text format).
     *
     * @param help_text the text to display
     **/
    global define void ShowHelp( string help_text ) {
	Popup::LongText(
			  // Heading for help popup window
			  _("Help"),
			  `RichText( help_text ),
			  50, 20 );
    }


    /**
     * Returns a standard wizard dialog with buttons "Next", "Back", "Abort".
     * @return term describing the dialog.
     **/
    global define term NextBackDialog() {
	return GenericDialog( BackAbortNextButtonBox() );
    }


    /**
     * Returns a standard wizard dialog with buttons "Cancel", "Accept"
     * @return term describing the dialog.
     **/
    global define term AcceptDialog() {
	return GenericDialog( CancelAcceptButtonBox() );
    }


    /**
     * Open any wizard dialog.
     * @param	dialog	a wizard dialog, e.g. Wizard::GenericDialog()
     **/
    global define void OpenDialog( term dialog ) {
	UI::OpenDialog( `opt(`defaultsize), dialog );
    }


    /**
     * Open a dialog with buttons "Next", "Back", "Abort"
     * and set the keyboard focus to "Next".
     **/
    global define void OpenNextBackDialog() {
	if ( have_fancy_ui == nil ) Init();

	if ( have_fancy_ui )
	{
	    UI::OpenDialog(`opt(`defaultsize ),
			   `Wizard(`back,  Label::BackButton(),
				   `abort, Label::AbortButton(),
				   `next,  Label::NextButton() ) );
	}
	else
	{
	    Wizard::OpenDialog( NextBackDialog() );
	    UI::SetFocus(`id(`next) );
	}
    }


    /**
     * Open a dialog with "Accept", "Cancel"
     * and set the keyboard focus to "Accept".
     **/
    global define void OpenAcceptDialog() {

	if ( have_fancy_ui == nil ) Init();

	if ( have_fancy_ui )
	{
	    UI::OpenDialog(`opt(`defaultsize ),
			   `Wizard(`no_back_button,   	"",
				   `cancel,		Label::CancelButton(),
				   `accept,		Label::AcceptButton() ) );
	}
	else
	{
	    Wizard::OpenDialog( AcceptDialog() );
	    UI::SetFocus(`id(`accept) );
	}
    }


    /**
     * Open a dialog with "Accept", "Cancel"
     * and set the keyboard focus to "Accept".
     **/
    global define void OpenAbortApplyFinishDialog()
    {

	if ( have_fancy_ui == nil ) Init();

	if ( have_fancy_ui )
	{
	    UI::OpenDialog(`opt(`defaultsize ),
			   `Wizard(`apply,	_( "&Apply" ),
				   `abort,	Label::AbortButton(),
				   `finish,	Label::FinishButton() ) );
	}
	else
	{
	    Wizard::OpenDialog( GenericDialog( AbortApplyFinishButtonBox() ) );
	    UI::SetFocus(`id(`finish ) );
	}
    }


    /**
     * Open a dialog with "Accept", "Cancel" that will also accept workflow steps.
     **/
    global define void OpenAcceptStepsDialog() {
	if ( have_fancy_ui == nil ) Init();

	if ( have_fancy_ui )
	{
	    UI::OpenDialog(`opt(`defaultsize ),
			   `Wizard(`opt(`stepsEnabled),
				   `no_back_button,   	"",
				   `cancel,		Label::CancelButton(),
				   `accept,		Label::AcceptButton() ) );
	}
	else
	{
	    OpenAcceptDialog();
	}
    }



    /**
     * Open a dialog with "Accept", "Cancel" that will also accept workflow steps.
     **/
    global define void OpenAcceptAbortStepsDialog() {
	if ( have_fancy_ui == nil ) Init();

	if ( have_fancy_ui )
	{
	    UI::OpenDialog(`opt(`defaultsize ),
			   `Wizard(`opt(`stepsEnabled),
				   `no_back_button,   	"",
				   `abort,		Label::AbortButton(),
				   `accept,		Label::AcceptButton() ) );
	}
	else
	{
	    OpenAcceptDialog();
	}
    }


    /**
     * Open a dialog with "Back", "Next", "Abort" that will also accept workflow steps.
     **/
    global define void OpenNextBackStepsDialog() {
	if ( have_fancy_ui == nil ) Init();

	if ( have_fancy_ui )
	{
	    UI::OpenDialog(`opt(`defaultsize ),
			   `Wizard(`opt(`stepsEnabled),
				   `back,  Label::BackButton(),
				   `abort, Label::AbortButton(),
				   `next,  Label::NextButton() ) );
	}
	else
	{
	    OpenNextBackDialog();
	}
    }


    /**
     * Close a wizard dialog.
     **/
    global define void CloseDialog() {
	if ( IsWizardDialog() )
	{
	    UI::CloseDialog();
	}
	else
	{
	    y2error( "Wizard::CloseDialog(): Topmost dialog is not a wizard dialog!" );
	}
    }


    /**
     * Substitute for UI::UserInput that transparently handles different
     * variations of the wizard layout. Returns `next if `next or `accept were
     * clicked, `back if `back or `cancel were clicked. Simply replace
     *    ret = UI::UserInput()
     * with
     *    ret = Wizard::UserInput()
     *
     * @return (maybe normalized) widget ID
     **/
    global define any UserInput() {
	any input = UI::UserInput();

	if ( input == `accept )	return `next;
	if ( input == `cancel )	return `back;

	return input;
    }


    /**
     * Create and open a typical installation wizard dialog.
     *
     * For backwards compatibility only - don't use this any more in new modules.
     **/
    global define void CreateDialog() {
	Wizard::OpenDialog( NextBackDialog() );
    }


    /**
     * Define how the general framework for the installation wizard should
     * look like. This function creates and shows a dialog.
     **/
    global define void SetContents(string title, term contents, string help_text,
				   boolean has_back, boolean has_next) {

	if ( have_fancy_ui == nil ) Init();

	if ( have_fancy_ui )
	{
	    UI::WizardCommand(`SetDialogHeading( title ) );
	    UI::WizardCommand(`SetHelpText( help_text ) );
	    UI::WizardCommand(`EnableNextButton( has_next ) );
	    UI::WizardCommand(`EnableBackButton( has_back ) );
	}
	else
	{
	    if ( UI::WidgetExists(`id(`next ) ) )
	    {
		UI::ChangeWidget(`id(`next), `Enabled, has_next);
		UI::SetFocus( `id(`next) );
	    }

	    if ( UI::WidgetExists(`id(`back	) ) )	UI::ChangeWidget(`id(`back), `Enabled, has_back);
	    if ( UI::WidgetExists(`id(`accept	) ) )	UI::SetFocus( `id(`accept ) );
	    if ( UI::WidgetExists(`id(`abort	) ) )	UI::ChangeWidget(`id(`abort),`Enabled, true);
	    if ( UI::WidgetExists(`id(`HelpText	) ) )	UI::ChangeWidget(`id(`HelpText), `Value, help_text);
	    if ( UI::WidgetExists(`id(`title	) ) )	UI::ChangeWidget(`id(`title), `Value, title);
	}

	UI::ReplaceWidget(`id(`contents), contents);
    }


    /**
     * Clear the wizard contents.
     *
     * This may sound silly, but it gives much faster feedback to the
     * user if used properly: Whenever the user clicks "Next" or
     * "Back", call ClearContents() prior to any lengthy
     * operation -> the user notices instant response, even though he
     * may in fact still have to wait.
     **/
    global define void ClearContents() {
	Wizard::SetContents("", `Empty(), "", false, false);
    }


    /**
     * Set contents of wizard dialog + its title, help_text and buttons labels. Enables both back and next button.
     * @param title title of window
     * @param contents contents of dialog
     * @param help_text help text
     * @param back_label label of back button
     * @param next_label label of next button
     **/
    global define void SetContentsButtons (string title, term contents, string help_text, string back_label, string next_label) {
	UI::PostponeShortcutCheck ();
	// Set button labels first to avoid geometry problems: SetContents()
	// calls ReplaceWidget() wich triggers a re-layout.

	if ( UI::WidgetExists(`id(`back ) ) )	UI::ChangeWidget(`id (`back), `Label, back_label);
	if ( UI::WidgetExists(`id(`next ) ) )	UI::ChangeWidget(`id (`next), `Label, next_label);
	Wizard::SetContents( title, contents, help_text, true, true );
	UI::CheckShortcuts ();
    }



    /**
     * Replace the wizard help subwindow with a custom widget.
     * Call this BEFORE Wizard::SetContents() to avoid geometry
     * management problems!
     *
     * Remember to restore the help subwindow with
     * RestoreHelp() before any other module is called!
     *
     * @param contents a term describing the new contents
     **/
    global define void ReplaceHelp(term contents) {
	UI::ReplaceWidget(`id(`helpSpace), contents);
    }


    /**
     * Restore the wizard help subwindow after Wizard::ReplaceHelp().
     **/
    global define void RestoreHelp(string help_text) {
	UI::ReplaceWidget(`id(`helpSpace), `RichText(`id(`HelpText), help_text ) );
    }


    /**
     * Replace the wizard 'back' button with a custom widget.
     **/
    global define void ReplaceBackButton(term contents) {
	UI::ReplaceWidget(`id(`rep_back), contents);
    }


    /**
     * Restore the wizard 'back' button after Wizard::ReplaceBackButton().
     **/
    global define void RestoreBackButton() {
	if ( UI::WidgetExists(`id(`rep_back ) ) )
	{
	    UI::ReplaceWidget(`id(`rep_back),
			      `PushButton(`id(`back), `opt (`key_F8),
					  Label::BackButton() )
			      );
	}
    }


    /**
     * Replace the wizard 'next' button with a custom widget.
     *
     * @param contents a term describing the new contents
     **/
    global define void ReplaceNextButton(term contents) {
	    UI::ReplaceWidget(`id(`rep_next), contents);
    }


    /**
     * Restore the wizard 'next' button after ReplaceNextButton().
     **/
    global define void RestoreNextButton() {
	if ( UI::WidgetExists(`id(`rep_next ) ) )
	{
	    UI::ReplaceWidget(`id(`rep_next),
			      `PushButton(`id(`next), `opt (`key_F10, `default),
					  Label::NextButton() )
			      );
	}
    }


    /**
     * Replace the wizard 'abort' button with a custom widget.
     *
     * @param contents a term describing the new contents
     **/
    global define void ReplaceAbortButton(term contents) {
	UI::ReplaceWidget(`id(`rep_abort), contents);
    }


    /**
     * Restore the wizard 'abort' button after ReplaceAbortButton().
     **/
    global define void RestoreAbortButton() {
	if ( UI::WidgetExists(`id(`rep_abort ) ) )
	{
	    UI::ReplaceWidget(`id(`rep_abort),
			      `PushButton(`id(`abort), `opt (`key_F9),
					  Label::AbortButton() )
			      );
	}
    }


    /**
     * Set the wizard 'title' icon to the specified icon from the standard icon
     * directory.
     *
     * @param icon_name name (without path) of the new icon
     **/
    global define void SetTitleIcon( string icon_name ) {
	    UI::WizardCommand(`SetDialogIcon( icon_path + "/" + icon_name + ".png", "" ) );
    }


    /**
     * Clear the wizard 'title' icon, i.e. replace it with nothing
     **/
    global define void ClearTitleIcon() {
	    UI::WizardCommand(`SetDialogIcon( "" ) );
    }


    /**
     */
    global define boolean SetDesktopIcon(string file) {
	string filename = sformat("%1/%2.desktop", Directory::desktopdir, file);
	path filepath = .yast2.desktop.v + filename + ."Desktop Entry".Icon;
	string icon = (string) SCR::Read(filepath);
	y2debug("icon: %1 (%2)", icon, filepath);

	if(icon == nil) {
	    return false;
	}
	SetTitleIcon(icon);
	return true;
    }

    /**
     * Replace the entire Wizard button box with a new one.
     *
     * @param button_box the new button box - something like `HBox(...)
     **/
    global define void ReplaceButtonBox( term button_box )
    {
	UI::ReplaceWidget(`id(`rep_button_box ), button_box );
    }



    /**
     * Enable the wizard's "Abort" button.
     **/
    global define void EnableAbortButton()
    {
	if ( ! UI::WizardCommand(`EnableAbortButton( true ) ) )
		UI::ChangeWidget(`id(`abort), `Enabled, true );
    }


    /**
     * Disable the wizard's "Abort" button.
     **/
    global define void DisableAbortButton()
    {
	if ( ! UI::WizardCommand(`EnableAbortButton( false ) ) )
	    UI::ChangeWidget(`id(`abort), `Enabled, false );
    }


    /**
     * Disable the wizard's "Next" (or "Accept") button.
     **/
    global define void DisableNextButton()
    {
	if ( ! UI::WizardCommand(`EnableNextButton( false ) ) )
	{
	    if ( UI::WidgetExists(`id(`next ) ) )
		UI::ChangeWidget(`id(`next), `Enabled, false );
	    else
		UI::ChangeWidget(`id(`accept), `Enabled, false );
	}
    }


    /**
     * Enable the wizard's "Next" (or "Accept") button.
     **/
    global define void EnableNextButton()
    {
	if ( ! UI::WizardCommand(`EnableNextButton( true ) ) )
	{
	    if ( UI::WidgetExists(`id(`next ) ) )
		UI::ChangeWidget(`id(`next), `Enabled, true );
	    else
		UI::ChangeWidget(`id(`accept), `Enabled, true );
	}
    }


    /**
     * Disable the wizard's "Back" button.
     **/
    global define void DisableBackButton()
    {
	if ( ! UI::WizardCommand(`EnableBackButton( false ) ) )
	    UI::ChangeWidget(`id(`back ), `Enabled, false );
    }

    /**
     * Enable the wizard's "Back" button.
     **/
    global define void EnableBackButton()
    {
	if ( ! UI::WizardCommand(`EnableBackButton( true ) ) )
	    UI::ChangeWidget(`id(`back ), `Enabled, true );
    }


    /**
     * Disable the wizard's "Cancel" button.
     **/
    global define void DisableCancelButton()
    {
	if ( ! UI::WizardCommand(`EnableCancelButton( false ) ) )
	    UI::ChangeWidget(`id(`cancel ), `Enabled, false );
    }

    /**
     * Enable the wizard's "Cancel" button.
     **/
    global define void EnableCancelButton()
    {
	if ( ! UI::WizardCommand(`EnableCancelButton( true ) ) )
	    UI::ChangeWidget(`id(`cancel ), `Enabled, true );
    }


    /**
     * Retranslate the wizard buttons.
     **/
    global define void RetranslateButtons()
    {
	// TO DO for YQWizard
	// TO DO for YQWizard
	// TO DO for YQWizard
	
	if ( UI::WidgetExists(`id(`WizardDialog ) ) )
	{
	    ReplaceButtonBox( UI::WidgetExists(`id(`accept ) ) ?
			      Wizard::AbortAcceptButtonBox() :
			      Wizard::BackAbortNextButtonBox() );
	}
    }


    /**
     * Set the keyboard focus to the wizard's "Next" (or "Accept") button.
     **/
    global define void SetFocusToNextButton()
    {
	if ( ! UI::WizardCommand(`SetFocusToNextButton() ) )
	{
	    UI::SetFocus( UI::WidgetExists(`id(`next) ) ? `id(`next) : `id(`accept ) );
	}
    }

    
    /**
     * Set the keyboard focus to the wizard's "Back" (or "Cancel") button.
     **/
    global define void SetFocusToBackButton()
    {
	if ( ! UI::WizardCommand(`SetFocusToBackButton() ) )
	{
	    UI::SetFocus( UI::WidgetExists(`id(`back) ) ? `id(`back) : `id(`cancel ) );
	}
    }




    /* ------------------------------------------------------------ */
    /*
     * screenshot functions
     */

    /**
     * Currently used screenshot name.
     * Initially, it must match the UI default, "yast2"
     */
    string screenshot_name = "yast2";
    /**
     * Screenshot names overriden by nested SetScreenShotName calls
     */
    list<string> screenshot_name_stack = [];

    /**
     * Declare a name for the current dialog to ease making screenshots.
     * By convention, the name is
     * {rpm-name-without-yast2}-{sorting-prefix}-{description}
     * The calls may be nested.
     * @param s eg. "mail-1-conntype"
     * @see RestoreScreenShotName
     */
    global define void SetScreenShotName (string s) {
	screenshot_name_stack = prepend (screenshot_name_stack, screenshot_name);
	screenshot_name = s;
	UI::SetModulename (screenshot_name);
    }

    /**
     * Restore the screenshot name.
     * If it does not match a SetScreenShotName, "yast2" is used
     * and a y2error logged.
     */
    global define void RestoreScreenShotName () {
	screenshot_name = screenshot_name_stack[0]:nil;
	if (screenshot_name == nil)
	{
	    screenshot_name = "yast2";
	    y2error (1, "No screenshot name to restore!");
	}
	else
	{
	    screenshot_name_stack = remove (screenshot_name_stack, 0);
	}
	UI::SetModulename (screenshot_name);
    }

/* EOF */
}
