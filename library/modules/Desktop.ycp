/**
 * File:	modules/Desktop.ycp
 * Package:	yast2
 * Summary:	Handling of .dektop entries
 * Author:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 */

{

module "Desktop";
textdomain "base";
import "Map";

/**
 * YaST configuration modules
 */
global map Modules = $[];

/**
 * YaST configuration groups
 */
global map Groups = $[];

/**
 * Optional agent path to the desktop files
 */
global path AgentPath = .yast2.desktop;

/**
 * Optional language for reading translated entries
 */
global string Language = "";

/**
 * Read module and group data from desktop files
 * @param Values list of values to be parsed (empty to read all)
 */
global define void Read(list Values) ``{

    /* read modules */
    map filemap = $[];
    path filepath = nil;
    string name = nil;

    path ps = add(AgentPath, "s");
    list files = SCR::Dir(ps);

    /* read groups */
    list groups = SCR::Dir(.yast2.groups.s);
    foreach(string group, groups, ``{
	filemap = $[];
	filepath = add(.yast2.groups.v, group);
	list values = SCR::Dir(filepath);
	foreach(string value, values, ``{
	    string ret = (string) SCR::Read(add(filepath, value));
	    // y2milestone("%1[%2]=%3", file, value, ret);
	    if(ret != nil) filemap[value] = ret;
	});
	filemap["modules"] = [];
	Groups[group] = filemap;
    });

    /* read modules */
    foreach(string file, files, ``{
	filemap = $[];
	path pv = add(AgentPath, "v");
	filepath = add(pv, file) + ."Desktop Entry";
	list values = SCR::Dir(filepath);
	if(Values != nil && Values != []) values = Values;
	foreach(string value, values, ``{
	    string ret = (string) SCR::Read(add(filepath, value));
	    if(ret != nil) filemap[value] = ret;
	});
	string name = regexpsub(file, "^.*/(.*)\.desktop", "\\1");
	if(name != "" && name != nil) {
	    Modules[name] = filemap;
	    string group = filemap["X-SuSE-YaST-Group"]:"";
	    if(group != "") Groups[group, "modules", size(Groups[group,"modules"]:[])] = name;
	}
    });

}

/**
 */
define string Translate(string key) ``{
    if(regexpmatch(key, "_\\(\"(.*)\"\\)") == true) {
        locale ke = regexpsub(key, "_\\(\"(.*)\"\\)", "\\1");
        key = (string) eval(ke);
    }
    return key;
}

/**
 */
define list CreateList(map M) ``{
    list keys = Map::Keys(M);
    keys = sort(string x, string y, keys, ``{
	return M[x, "SortKey"]:"" <= M[y, "SortKey"]:"";
    });
    y2debug("keys=%1", keys);

    return maplist(string name, keys, ``{
	return `item(`id(name), Translate(M[name, "Name"]:"???"));
    });
}

/**
 */
global define list GroupList() ``{
    return CreateList(Groups);
}

/**
 */
global define list ModuleList(string group) ``{
    map m = filter(string k, map v, Modules, ``{
	return contains(Groups[group, "modules"]:[], k);
    });
    y2debug("%1", m);
    // Translation and sorting not required:
    // return CreateList(m);

    string key = "Name";
    if(Language != "" && Language != "") key = sformat("Name[%1]", Language);

    return maplist(string name, Map::Keys(m), ``{
	return `item(`id(name), m[name, key]:(m[name, "Name"]:"???"));
    });
}

/* EOF */
}
