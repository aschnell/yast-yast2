/**
 * File:	modules/ProductFetures.ycp
 * Package:	installation
 * Summary:	Product features
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */

{
    module "ProductFeatures";
    textdomain "base";

    import "Misc";
    import "Mode";

    /*********************************************************************
      *   Those are variables from the content file, we can override them
      *   in the control file
     *********************************************************************/

    /**
     * url of release notes (downloaded during internet test)
     */
    global string relnotesurl	= "";

    /**
     *  Run YOU during the Internet connection test.
     */
    global boolean run_you	= true;

    /**
     * list of flags from content file
     */
    global list flags		= [];


    /*********************************************************************
      *   Packages and Selections
     *********************************************************************/

    /**
     *  Control how the base selection is chosen:
     *    `fixed - the base selection is fixed (see fixed_base_selection below)
     *    `auto  - a base selection is automatically choosen (depending on disk
     *             space)
     */
    global symbol base_selection_choice		= `auto;

    /**
     *  Name of the fixed base selection.
     */
    global string fixed_base_selection		= "";


    /**
     * List of additional packages to add
     */
    global list<string> packages = [];

    /**
     *  If non-empty it will be called with WFM::CallFunction
     *	from Packages::ComputeSystemPackageList. Gets a list of packages
     *  as the one and only argument and must return a list of packages
     *  again.
     */
    global string packages_transmogrify		= "";


    /***
      * On some products, this can be turned on to prevent old
      * RPMs from being deleted (#35235)
      */
    global boolean delete_old_packages          = true;


    /**
     *  Should the software proposal inform about the fact that the user wants
     *  to install e.g. i386 on amd64.
     */
    global boolean inform_about_suboptimal_distribution = false;



    // Only an update, NOT an upgrade
    global boolean onlyUpdateInstalled = false;


    // How is the software proposal handled? What is it based on?
    // Possible values are: desktop|selection
    // Default is "selection"

    global string software_proposal = "selection";

    /*********************************************************************
      *   Partitioning
     *********************************************************************/

    /**
     * Flexible partitioning
     */
    global boolean flexible_partitioning = false;

    /**
     * EVMS config in YaST2
     */
    global boolean evms_config = false;

    /**
     * Flexible partitioning map
     */
    global map FlexiblePartitioning = $[];




    /*********************************************************************
      *   Misc. Features
      *
     *********************************************************************/


    /**
     * autologin is enabled by default.
     */
    global boolean enable_autologin = true;

    /**
     * Runlevel
     */
    global string runlevel = "";

    /**
     * Language
     */
    global string language = "";

    /**
     * Skip first Language if user has selected a langauge using
     * syslinux or selected the language using linuxrc.
     */
    global boolean skip_language_dialog = false;

    /**
     * Keyboard
     */
    global string keyboard = "";

    /**
     * Timezone
     */
    global string timezone = "";

    /**
     * needed for desktop product to use shorter timeslices.
     */
    global boolean use_desktop_scheduler = true;

    /**
     * The I/O scheduler selection
     */
    global string io_scheduler = "as";

    /**
     * Value of FAM_LOCAL_ONLY in /etc/sysconfig/fam
     * One of "kde", "gnome", "always", "never" (default)
     * Adds according to the default window manager
     * No need to save in the system
     */
    global string fam_local_only = "never";

    /**
     * UI mode
     * possible values: "simple" or "expert"
     */
    global string ui_mode = "expert";



    /**
     * Save product features
     */
    global void Save()
    {
        SCR::Write(.product.features.USE_DESKTOP_SCHEDULER,
                (use_desktop_scheduler) ? "yes" : "no" );
        SCR::Write(.product.features.UI_MODE, ui_mode );
        SCR::Write(.product.features.IO_SCHEDULER,
		io_scheduler);
        SCR::Write(.product.features.ENABLE_AUTOLOGIN,
                (enable_autologin) ? "yes" : "no" );
        SCR::Write(.product.features.EVMS_CONFIG,
                (evms_config) ?  "yes" : "no" );
        SCR::Write (.product.features, nil );     // flush
        return;

    }


    /**
     * Restore product features in running system
     */
    global void Restore()
    {
        use_desktop_scheduler = Misc::SysconfigRead(
                .product.features.USE_DESKTOP_SCHEDULER, "yes" ) == "yes";
	io_scheduler = Misc::SysconfigRead(
		.product.features.IO_SCHEDULER, "as");
	ui_mode = Misc::SysconfigRead(
		.product.features.UI_MODE, "expert");
        enable_autologin = Misc::SysconfigRead(
                .product.features.ENABLE_AUTOLOGIN, "yes") == "yes";
        evms_config = Misc::SysconfigRead(
                .product.features.EVMS_CONFIG, "no") == "yes";
        return;
    }


    // -----------------------------------------------
    /**
     * Constructor
     */
    global define void ProductFeatures () ``{
        if (Mode::normal && !Mode::initial && !Mode::cont)
            Restore();
        return;
    }

/* EOF */
}
