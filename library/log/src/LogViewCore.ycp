/**
 * File:	modules/LogViewCore.ycp
 * Package:	YaST2
 * Summary:	Displaying a log
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *		Arvin Schnell <aschnell@suse.de>
 *
 * $Id: LogViewCore.ycp 45503 2008-03-17 09:46:23Z aschnell $
 */
{
    module "LogViewCore.ycp";

    textdomain "base";


    /**
     * default value of maximum displayed lines
     */
    integer max_lines_default = 100;


    /**
     * lines of the log
     */
    list<string> lines = [];


    /**
     * data describing log: widget, file, max_lines etc.
     */
    map<string, any> data = $[];


    /**
     * id of background process
     */
    integer id = 0;


    list<string> GetNewLines()
    {
	list<string> new_lines = [];

	while(true)
	{
	    string line = (string) SCR::Read(.process.read_line, id);
	    if (line == nil)
		break;

	    new_lines = add(new_lines, line);
	}

	return new_lines;
    }


    /**
     * Remove unneeded items from a list of lines
     * If max_lines is 0, then don't remove anything
     */
    void DeleteOldLines()
    {
	integer max_lines = data["max_lines"]:max_lines_default;
	if (max_lines == 0)
	    return;

	integer sl = size(lines);
	if (sl > max_lines)
	{
	    lines = filter(string l, lines, {
		sl = sl - 1;
		return sl < max_lines;
	    });
	}
    }


    /**
     * Starts the log reading command via process agent.
     *
     * The LogView widget must exist when calling this function.
     *
     * Note: This function has less functionality than InitLogReading in LogView.ycp.
     * The extra functionality was removed here since it was broken (bnc #371983).
     */
    global void Start(map<string, any> d)
    {
	data = d;

	list<string> args = [ "--retry", "-n", sformat("%1", data["max_lines"]:max_lines_default),
			      "-f", data["file"]:"" ];
	id = (integer) SCR::Execute (.process.start, "/usr/bin/tail", $[ "args" : args ]);
	y2debug("started tail with args %1", args);

	sleep(100);

	lines = GetNewLines();
	DeleteOldLines();

	UI::ChangeWidget(`id(data["widget"]:nil), `Value, mergestring(
			     maplist(string line, lines, { return line + "\n"; } ), ""));
    }


    global void Update()
    {
	// TODO: check status of process and report error depending on exit code

	list<string> new_lines = GetNewLines();
	if (size(new_lines) > 0)
	{
	    lines = (list<string>) merge(lines, new_lines);
	    DeleteOldLines();

	    UI::ChangeWidget(`id(data["widget"]:nil), `LastLine, mergestring(
				 maplist(string line, new_lines, { return line + "\n"; } ), ""));
	}
    }


    global void Stop()
    {
	SCR::Execute(.process.release, id);
    }


    global list<string> GetLines()
    {
	return lines;
    }
}
