/**
 * File:	clients/menu.ycp
 * Module:	yast2
 * Summary:	NCurses Control Center
 * Authors:	Michal Svec <msvec@suse.cz>
 *
 * $Id$
 *
 * Provides a list of available yast2 modules. This module is inteded for use
 * with ncurses, for X the yast2 control center should be used.
 */

{

textdomain "base";

import "Desktop";
import "Label";
import "Popup";

map Groups = $[];
map Modules = $[];

/**
 */
global define void DisplaySplash() ``{
    UI::OpenDialog(`opt(`defaultsize), `VBox(
	`VStretch (),
	/* Message shown while loading modules information */
	`Label (_("Loading modules, please wait ...")),
	`VStretch ()
    ));
}

/**
 */
global define void OpenMenu() ``{
    UI::OpenDialog(`opt(`defaultsize), `VBox(
	`HBox(
	    `HSpacing(1),
	    `Frame( "", `VBox(
		`VSpacing(0.4),
		`HBox(
		    `HSpacing(2),
		    /* Heading for NCurses Control Center */
		    `HCenter(`Heading( _("YaST2 Control Center")) ),
		    `HSpacing(2)
		),
		`VSpacing(0.4)
	    )),
	    `HSpacing(1.5)
	),

	`VSpacing(1.0),
	`HBox(
	    `HSpacing(1),
	    `HWeight( 30, `ReplacePoint(`id(`groups_rep),
		    `SelectionBox(`id(`groups), `opt(`notify, `immediate, `keyEvents), "", [])
	    )),
	    `HSpacing(1),
	    `HWeight( 70, `ReplacePoint( `id(`progs_rep),
		    `SelectionBox(`id(`progs), `opt(`notify, `keyEvents), "", [])
	    )),
	`HSpacing(1)
	),

	`VSpacing(1.0),
	`HBox(
	    `HSpacing(2),
	    `Left(`PushButton(`id(`help), `opt(`key_F1), Label::HelpButton())),
	    `Right(`PushButton(`id(`quit), `opt(`key_F9), Label::QuitButton())),
	    `HSpacing(2)
	),
	`VSpacing(1)
    ));
}

/**
 */
global define void Launch(string modul) ``{
    string function = Modules[modul, "X-SuSE-YaST-Call"]:"";
    list arguments = splitstring(Modules[modul, "X-SuSE-YaST-Argument"]:"", " ");
    y2debug("Calling: %1 (%2)", function, arguments);

    if(function != "") {
	any ret = WFM::CallFunction (function, arguments);
	y2debug("WFM::CallFunction (%1, %2) returns: %3", function, arguments, ret);
    }
}

/**
 */
global define void ShowNcursesHelp() ``{

    /* NCurses Control Center headline */
    string headline = _("Controlling YaST2 ncurses with the Keyboard");

    /* NCurses Control Center help 1/7 */
    string help = _("<p>1) <b>General</b><br>
Navigate through the dialog elements with
[TAB] and [SHIFT] + [TAB] or [TAB] and [ALT] + [TAB].
Select or activate elements with [SPACE] or [ENTER].
Some elements use arrow keys.</p>") +

    /* NCurses Control Center help 2/7 */
    _("<p>Buttons are equipped with shortcut keys like [ALT] and a
letter. Because the environment can affect the use of
the keyboard, there is more than one way to
navigate the dialog pages. See the next section.</p>") +

    /* NCurses Control Center help 3/7 */
    _("<p>2) <b>Substitution of Keystrokes</b><br>
If [TAB] and [SHIFT] + [TAB] or [TAB] and [ALT] + [TAB] do not work,
move focus forward with [CTRL] + [F] and backward with [CTRL] + [B].</p>") +

    /* NCurses Control Center help 4/7 */
    _("<p>If [ALT] + [letter] does not work,
try [ESC] + [letter]. Example: [ESC] + [H] for [ALT] + [H].
[ESC] + [TAB] is also a substitute for [ALT] + [TAB].</p>") +

    /* NCurses Control Center help 5/7 */
    _("<p>3) <b>Function Keys</b><br>
F keys provide a quick access to main functions.
There are many modules with special functions and it is not
possible to apply the following system to all of them.</p>") +

    /* NCurses Control Center help 6/7 */
    _("<p>In some environments, all or some
F keys are not availiable.
There is no solution for this problem yet.</p>") +

    /* NCurses Control Center help 7/7 */
    _("F1  = Help<br>
F2  = Info or Description<br>
F3  = Add<br>
F4  = Edit or Configure<br>
F5  = Delete<br>
F6  = Test<br>
F7  = Expert or Advanced<br>
F8  = Back<br>
F9  = Abort<br>
F10 = OK, Next, Finish, or Accept<br>");

    Popup::LongText(headline, `RichText(help), 60, 20);

}

DisplaySplash();

list Values = [
    "Name",
    // not required: "GenericName",
    "X-SuSE-YaST-Argument",
    "X-SuSE-YaST-Call",
    "X-SuSE-YaST-Group",
    // not required: "X-SuSE-YaST-SortKey",
];

Desktop::Read(Values);
Groups = Desktop::Groups;
Modules = Desktop::Modules;
y2debug("Groups=%1", Groups);
y2debug("Modules=%1", Modules);

OpenMenu();

list GroupList = Desktop::GroupList();
UI::ReplaceWidget(`id(`groups_rep), `SelectionBox(`id (`groups), `opt(`notify, `immediate, `keyEvents), "", GroupList));
y2debug("%1", GroupList);

string first = (string) select((list)select(GroupList[0]:[], 0, []), 0, nil);
y2debug("%1", first);

/**
 */
global define void ReplaceModuleList(string group) ``{
    UI::ReplaceWidget(`id (`progs_rep), `SelectionBox( `id (`progs), `opt (`notify, `keyEvents), "", Desktop::ModuleList(group)));
}

ReplaceModuleList(first);
UI::SetFocus(`id(`groups));

while(true) {

    map event = UI::WaitForEvent();
    // y2debug too constly: y2debug("event=%1", event);

    if (event["ID"]:`none == `groups
	 && event["EventReason"]:"" == "SelectionChanged" )
    {
	string id = (string) UI::QueryWidget(`id(`groups), `CurrentItem);
	if(is(id, string)) ReplaceModuleList(id);
	continue;
    }
    else if ( event["ID"]:`none == `progs
	      && event["EventReason"]:"" == "Activated" )
    {
	string program = (string) UI::QueryWidget(`id(`progs), `CurrentItem);
	Launch(program);
    }
    else if ( event["ID"]:`none == `groups
	      && event["EventReason"]:"" == "Activated" )
    {
	UI::SetFocus ( `id(`progs) );
    }
    else if ( event["FocusWidgetID"]:`none == `groups
	      && event["ID"]:"" == "CursorRight" )
    {
	UI::SetFocus ( `id(`progs) );
    }
    else if ( event["FocusWidgetID"]:`none == `progs
	      && event["ID"]:"" == "CursorLeft" )
    {
	UI::SetFocus ( `id(`groups) );
    }
    else if ( event["ID"]:`none == `help )
    {
	ShowNcursesHelp();
    }
    else if( event["ID"]:`none == `quit )
    {
	break;
    }
    else
    {
	y2warning ( "Event or widget ID not handled" );
    }

}

UI::CloseDialog ();

/* EOF */
}
